# This Action checks Pull Request Titles, and updates them if they don't start with a Jira-ticket-formatted string

name: First Commit Jira to GitHub PR Title Updater

# Permit being called from other Actions
on: workflow_call

jobs:
  pr_title_validate_and_update:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          ref: '${{ github.event.pull_request.base.ref }}'
      
      - name: Check and Update PR Title
        id: check_and_update_pr_title
        run: |

          ###
          # Set vars
          ###

          # If local_testing = true, set vars
          if [[ $local_testing == true ]]; then
            # If running locally for tesing
            GH_ORG="kymidd"
            GH_REPO="TestingPRUpdater"
            PR_TITLE="$PR_TITLE"
            GITHUB_TOKEN="$GITHUB_TOKEN"
            PULL_REQUEST_NUMBER=2
            BASE_BRANCH="main"
          else
            # If running as an Action
            GH_ORG="${{ github.repository_owner }}"
            GH_REPO=$(echo ${{ github.repository }} | cut -d "/" -f 2)
            PR_TITLE="${{ github.event.pull_request.title }}"
            GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}"
            PULL_REQUEST_NUMBER="${{ github.event.pull_request.number }}"
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
          fi


          ###
          # Functions
          ### 

          print_break() {
            # Print a break in the output
            echo ""
            echo "----------------------------------------"
            echo ""
          }

          exit_if_not_local() {
            # If not running locally, exit 
            if [[ $local_testing != true ]]; then
              print_break
              exit $1
            else

              echo "游댮 Running locally, not exiting with code $1, press any key to continue"

              # Wait for keypress to continue
              while true; do
                read -rsn1 key # Read a single character silently
                if [ $? = 0 ]; then
                  echo -e "\n$key is pressed, continuing"
                  break # Exit the loop
                else
                  echo "Waiting for a keypress"
                fi
              done

              print_break
            fi
          }

          update_pr_title() {
            echo "游릭 New PR title will be: $PR_TITLE"
            unset CURL
            CURL=$(curl -s \
              -X PATCH \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer $GITHUB_TOKEN" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              https://api.github.com/repos/$GH_ORG/$GH_REPO/pulls/$PULL_REQUEST_NUMBER \
              -d "{\"title\":\"$PR_TITLE\"}" 2>&1 || true)
              if [[ $(echo "$CURL" | jq -r '.title') == $PR_TITLE ]]; then
              echo "游릭 Successfully updated PR title"
              exit_if_not_local 0
            else
              echo "游댮 Something bad happened updating the PR title, please investigate response:"
              echo "$CURL"
              exit_if_not_local 1
            fi
          }


          ###
          # Check vars required to run
          ###

          if [[ -z $GH_ORG || -z $GH_REPO || -z $PR_TITLE || -z $GITHUB_TOKEN || -z $PULL_REQUEST_NUMBER || -z $BASE_BRANCH ]]; then
            echo "游댮 One or more variables are undefined, exiting"
            exit_if_not_local 1
          fi


          ###
          # Start
          ###

          print_break
          echo "游릭 The title of your pull request is currently $PR_TITLE"


          ###
          # Normalize inputs
          ### 

          # Capitalize the PR_TITLE to make regex matches easier downstream
          NORMALIZED_PR_TITLE=$(echo $PR_TITLE | tr '[:lower:]' '[:upper:]')


          ###
          # Look at PR commits, find first one, extract commit message
          ###

          # Checkout the PR branch
          git checkout -q "${{ github.event.pull_request.head.ref }}"

          # Find current branch name
          CURRENT_BRANCH=$(git branch | grep ^\* | cut -d "*" -f 2 | cut -d " " -f 2)

          # Find hash of commit most common ancestor, e.g. where branch began
          BRANCH_MERGE_BASE=$(git merge-base ${BASE_BRANCH} ${CURRENT_BRANCH})

          # Find all commits since common ancestor
          BRANCH_COMMITS=$(git rev-list ${BRANCH_MERGE_BASE}..HEAD)

          # Find first commit, extract commit message and then Jira ticket number
          FIRST_COMMIT=$(echo $BRANCH_COMMITS | head -n 1)
          FIRST_COMMIT_MESSAGE=$(git log --max-count=1 --format=%B "$FIRST_COMMIT" | awk 'NF')
          NORMALIZED_FIRST_COMMIT_MESSAGE=$(echo $FIRST_COMMIT_MESSAGE | tr '[:lower:]' '[:upper:]')
          JIRA_TICKET=$(echo $NORMALIZED_FIRST_COMMIT_MESSAGE | grep -o -E '^[A-Z]{2,}-[0-9]+' || true)

          # If commit message doesn't start with Jira ticket, exit
          if [ -z "$JIRA_TICKET" ]; then
            # No Jira ticket found in title at all, exit with failure code
            echo "游댮 No Jira ticket found at beginning of PR title or at beginning of first commit message."
            echo "游댮 Please update your PR title. You'll also likely need to \"git commit --amend\" your first commit message so Jira Commit Checker Action will succeed"
            print_break
            exit_if_not_local 1
          fi


          ###
          # Check if first commit matches PR title
          ###

          # Check if first commit matches PR title
          if [[ $PR_TITLE == $FIRST_COMMIT_MESSAGE ]]; then
            echo "游릭 First commit message matches PR title, no changes triggered"
            exit_if_not_local 0
          else
            echo "游댮 First commit message doesn't match PR title, updating PR title"
            print_break
            
            # Set new PR title to value of first commit message
            PR_TITLE="$FIRST_COMMIT_MESSAGE"
            update_pr_title
          fi
